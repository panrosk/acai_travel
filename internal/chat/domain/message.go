package domain

import (
	"github.com/google/uuid"
	"time"
)

type MessageSender string

const (
	SenderUser   MessageSender = "user"
	SenderSystem MessageSender = "system"
	SenderAI     MessageSender = "ai"
)

// Stringer interface (usefull for fmt, logs, tracing, etc)
func (s MessageSender) String() string {
	return string(s)
}

// Message represents a single message in a chat.
// It can be sent by the user, the system, or an AI assistant.
type Message struct {
	ID        uuid.UUID     // Unique message identifier
	ChatID    uuid.UUID     // Associated chat session ID
	Sender    MessageSender // Who sent the message: user, system or AI
	Content   string        // Text content of the message
	Timestamp time.Time     // UTC timestamp of when the message was created
}

// NewUserMessage creates a new message from the user.
func NewUserMessage(chatID uuid.UUID, content string) Message {
	return Message{
		ID:        uuid.New(),
		ChatID:    chatID,
		Sender:    SenderUser,
		Content:   content,
		Timestamp: time.Now().UTC(),
	}
}

// NewSystemMessage creates a new system-generated message.
func NewSystemMessage(chatID uuid.UUID, content string) Message {
	return Message{
		ID:        uuid.New(),
		ChatID:    chatID,
		Sender:    SenderSystem,
		Content:   content,
		Timestamp: time.Now().UTC(),
	}
}

// NewAIMessage creates a new message generated by an AI assistant.
func NewAIMessage(chatID uuid.UUID, content string) Message {
	return Message{
		ID:        uuid.New(),
		ChatID:    chatID,
		Sender:    SenderAI,
		Content:   content,
		Timestamp: time.Now().UTC(),
	}
}
